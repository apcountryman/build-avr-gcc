#!/usr/bin/env bash

# build-avr-gcc
#
# Copyright 2019 Andrew Countryman <apcountryman@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.

# File: build-avr-gcc
# Description: avr-gcc build script.

function abort()
{
    exit 1
}

function error()
{
    local param_message; declare -r param_message="$1"

    ( >&2 echo "$MNEMONIC: $param_message" )
}

function message()
{
    local param_content; declare -r param_content="$1"

    echo -n "$MNEMONIC: $param_content"
}

function display_help_text()
{
    echo "NAME"
    echo "    $MNEMONIC - Build avr-gcc from gmp 6.1.0, mpfr 3.1.4, mpc 1.03, isl 0.18,"
    echo "        binutils 2.32, gcc 8.3.0, and avr-libc 2.0.0."
    echo "SYNOPSIS"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC --version"
    echo "    $MNEMONIC --download <component>"
    echo "    $MNEMONIC --extract <component>"
    echo "OPTIONS"
    echo "    --download <component>"
    echo "        Download the specified component."
    echo "    --extract <component>"
    echo "        Extract the specified component."
    echo "    --help"
    echo "        Display this help text."
    echo "    --version"
    echo "        Display the version of this script."
    echo "    <component>"
    echo "        The component to to execute an action for. The following components are"
    echo "        supported:"
    echo "            gmp"
    echo "EXAMPLES"
    echo "    $MNEMONIC --help"
    echo "    $MNEMONIC --version"
    echo "    $MNEMONIC --download gmp"
    echo "    $MNEMONIC --extract gmp"
}

function display_version()
{
    local version; declare -r version=$( git describe --always --dirty --broken )

    echo "$MNEMONIC, version $version"
}

function download_component()
{
    local param_component; declare -r param_component="$1"

    if [[ ! -d "$BUILD_DIRECTORY" ]]; then
        if ! mkdir -p "$BUILD_DIRECTORY"; then
            error "build directory creation failure, aborting"
            abort
        fi
    fi

    if ! cd "$BUILD_DIRECTORY"; then
        error "unable to enter build directory, aborting"
        abort
    fi

    local download_url;

    case $param_component in
        gmp)
            declare -r download_url="ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2"
            rm -rf gmp*.tar.*
            ;;
        *)
            error "$param_component is not a supported component, aborting"
            abort
            ;;
    esac

    if ! wget "$download_url"; then
        error "$param_component download failure, aborting"
        abort
    fi
}

function extract_component()
{
    local param_component; declare -r param_component="$1"

    if ! cd "$BUILD_DIRECTORY"; then
        error "unable to enter build directory, aborting"
        abort
    fi

    rm -rf "$param_component"*/

    if ! tar -xf "$param_component"*.tar.*; then
        error "$param_component extraction failure, aborting"
        abort
    fi
}

function main()
{
    declare -r SCRIPT=$( readlink -f $0 )
    declare -r REPOSITORY=$( dirname $SCRIPT )
    declare -r MNEMONIC=$( basename $SCRIPT )

    declare -r BUILD_DIRECTORY="$REPOSITORY"/build

    local action;

    while [[ $# -gt 0 ]]; do
        local argument; argument="$1"
        shift

        case $argument in
            --help)
                display_help_text
                exit
                ;;
            --version)
                display_version
                exit
                ;;
            --download)
                declare -r action=download_component
                break
                ;;
            --extract)
                declare -r action=extract_component
                break
                ;;
            --*)
                ;&
            -*)
                error "'$argument' is not a supported option, aborting"
                abort
                ;;
            *)
                error "'$argument' is not a valid argument, aborting"
                abort
                ;;
        esac
    done

    if [[ $# -eq 0 ]]; then
        error "component not specified, aborting"
        abort
    fi

    "$action" "$1"
}

main "$@"
